{ config, lib, pkgs, ... }:

with builtins;

let
  fclib = config.fclib;
  role = config.flyingcircus.roles.kvm_host;
  enc = config.flyingcircus.enc;

in
{
  options = {
    flyingcircus.roles.kvm_host = {
      enable = lib.mkEnableOption "KVM server";
    };
  };

  config = lib.mkIf role.enable {

    flyingcircus.services.ceph.client.enable = true;
    flyingcircus.services.consul.enable = true;

    boot = {
      kernelModules = [ "kvm" "kvm_intel" "kvm_amd" ]; 
    };

    environment.systemPackages = [
      pkgs.qemu_kvm
      pkgs.fc.qemu
    ];

    system.activationScripts.fc-qemu = lib.stringAfter [] ''
      ${pkgs.fc.qemu}/bin/fc-qemu report-supported-cpu-models
      mkdir -p /etc/qemu/vm
    '';


    services.consul.extraConfig.watches = [
      { # handler = "/run/wrappers/bin/sudo ${pkgs.fc.qemu}/bin/fc-qemu -v handle-consul-event";
        handler = "/run/wrappers/bin/sudo /home/ctheune/fc.qemu/result/bin/fc-qemu -v handle-consul-event";
        type = "keyprefix";
        prefix = "node/";
        token = enc.parameters.secrets."consul/agent_token";
      }

      { # handler = "/run/wrappers/bin/sudo ${pkgs.fc.qemu}/bin/fc-qemu -v handle-consul-event";
        handler = "/run/wrappers/bin/sudo /home/ctheune/fc.qemu/result/bin/fc-qemu -v handle-consul-event";
        type = "keyprefix";
        prefix = "snapshot/";
        token = enc.parameters.secrets."consul/agent_token";
      }
    ];
      flyingcircus.passwordlessSudoRules = [
        {
          commands = [
            "${pkgs.fc.qemu}/bin/fc-qemu -v handle-consul-event"
            "/home/ctheune/fc.qemu/result/bin/fc-qemu -v handle-consul-event"
             ];
          users = [ "consul" ];
        }
      ];

    # environment.etc."backy.global.conf".text = '' '';

    # services.logrotate.extraConfig = ''
    #     /srv/backy/*/backy.log {
    #     }
    #   '';

    # flyingcircus.services.sensu-client.checks = {

    #   backy_sla = {
    #     notification = "Backy SLA conformance";
    #     command = "sudo ${pkgs.backy}/bin/backy check";
    #   };

    # };


    #echo "never" > /sys/kernel/mm/transparent_hugepage/enabled

    # After a reboot we may have:
    # - exchanged the CPU
    # - updated the kernel
    # - updated the microcode
    #
    # Those may lead to different supported CPUs, so it's a good chance to
    # update the directory.
    # fc-qemu report-supported-cpu-models && touch /tmp/fc-qemu-report-cpus

    # kvmifup
    # kvmifdown

    # fc.qemu
      # sensu check
    # log rotation

    # Managed by Puppet: do not edit this file directly. It will be overwritten!

    # # Exclude the .qemu*.log internal logs. They aren't big and rotating them
    # # is hard.
    # /var/log/vm/*.[!q]*log {
    #     # "create" is important - stops log files of outmigrated VMs to be dropped
    #     # from the shell glob above.
    #     create 0644 root root
    #     copytruncate
    #     nodelaycompress
    #     rotate 14
    # }

    # /var/log/fc-qemu.log {
    #     # There is no sensitive data in this log and we sometimes miss to extract
    #     # crash information within two weeks. Keep a longer history so we can
    #     # actually analyze crashes even much later.
    #     rotate 90
    # }


  #   file { '/var/log/vm': ensure => directory }

  #       "/etc/udev/rules.d/65-kvm.rules":


  # app_admin::configuration_action { 'kvm':
  #       script => 'puppet:///modules/app_kvm/configure-kvm.sh',
  #       priority => 20,
  #   }


  #   concat::fragment { 'sysctl.conf_kvmhost':
  #       source => 'puppet:///modules/app_kvm/sysctl.conf_kvmhost',
  #       order => 21,
  #       target => '/etc/sysctl.conf'
  #   }



  #   sys_cluster::consul::configuration_item { 'fc-qemu':
  #       content => template('app_kvm/consul_fc-qemu.json.erb'),
  #       mode => 0600,  # contains ACL token
  #   }

  #   file { '/usr/local/lib/maintenance/prepare/kvm':
  #       source => 'puppet:///modules/app_kvm/maintenance_prepare_kvm.py',
  #       mode => 0755,
  #   }


      # log forwarding

    # fc.qemu/consul integration

    # bridge reconfiguration when bridge is restarted?
  };
}
